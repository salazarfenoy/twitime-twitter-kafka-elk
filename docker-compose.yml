version: '3.2'

services:
## ---------------------------------------------------------------------------------------------------------------------------
## ---------------------------------------------------------------------------------------------------------------------------
## -------- ELK STACK --------------------------------------------------------------------------------------------------------
## ---------------------------------------------------------------------------------------------------------------------------
## ---------------------------------------------------------------------------------------------------------------------------

  elasticsearch:
    build:
      context: docker/elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    container_name: elastic
    volumes:
      - "./docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml"
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
      - type: bind
        source: ./docker/tls/elasticsearch/elasticsearch.p12
        target: /usr/share/elasticsearch/config/elasticsearch.p12
        read_only: true
      - type: bind
        source: ./docker/tls/elasticsearch/http.p12
        target: /usr/share/elasticsearch/config/http.p12
        read_only: true
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk

  logstash:
    build:
      context: docker/logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    container_name: logstash
    volumes:
      - "./docker/logstash/load:/usr/share/logstash/load"
      - "./docker/logstash/templates:/usr/share/logstash/templates"
      - type: bind
        source: ./docker/logstash/config
        target: /usr/share/logstash/config   
      - type: bind
        source: ./docker/logstash/pipeline
        target: /usr/share/logstash/pipeline   
      - type: bind
        source: ./docker/tls/kibana/elasticsearch-ca.pem
        target: /usr/share/logstash/config/elasticsearch-ca.pem
        read_only: true  
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: docker/kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    container_name: kibana
    volumes:
      - type: bind
        source: ./docker/kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
      - type: bind
        source: ./docker/tls/kibana/elasticsearch-ca.pem
        target: /usr/share/kibana/config/elasticsearch-ca.pem
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch

### ---------------------------------------------------------------------------------------------------------------------------
### ---------------------------------------------------------------------------------------------------------------------------
### -------- KAFKA CONFLUENT --------------------------------------------------------------------------------------------------
### ---------------------------------------------------------------------------------------------------------------------------
### ---------------------------------------------------------------------------------------------------------------------------

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - elk
    #volumes:
      #- "./docker/data-cp/zk-logs:/var/lib/zookeeper/log"
      #- "./docker/data-cp/zk-data:/var/lib/zookeeper/data"
    user: "0"

  broker:
    image: confluentinc/cp-server:7.0.1
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
      - elk
    #volumes:
    #  - "./data-cp/kafka-data:/var/lib/kafka/data"
    user: "0"
    command: sh -c "((sleep 15 && kafka-topics --create --zookeeper zookeeper:2181 --replication-factor 1 --partitions 3 --topic twitter)&) && /etc/confluent/docker/run "

  schema-registry:
    image: confluentinc/cp-schema-registry:7.0.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - elk
    

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.0.1
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
      - ksqldb-server
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    networks:
      - elk

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.0.1
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
    networks:
      - elk
    volumes:
      - "./scripts:/usr/share/ksql-scripts"


  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.0.1
    depends_on:
      - broker
      - schema-registry
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
    networks:
      - elk

  ksql-cli:
    image: confluentinc/ksqldb-cli:0.23.1
    depends_on:
      - check-ksql-db-started
    volumes:
      - "./docker/scripts:/usr/share/ksql-scripts"
    entrypoint: 
      - /bin/bash
      - -c
      - |
        echo -e "\n\n⏳ Waiting for ksqlDB to be available before launching CLI\n"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://ksqldb-server:8088/) -eq 000 ]
        do 
          echo -e $$(date) "ksqlDB Server HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://ksqldb-server:8088/) " (waiting for 200)"
          sleep 5
        done
        echo -e "\n\n-> Running SQL commands\n"
        cat /usr/share/ksql-scripts/script.sql <(echo 'EXIT')| ksql http://ksqldb-server:8088
        echo -e "\n\n-> Sleeping…\n"
        sleep infinity    
    networks:
      - elk

### ---------------------------------------------------------------------------------------------------------------------------
### ---------------------------------------------------------------------------------------------------------------------------
### -------- JAVA MS ----------------------------------------------------------------------------------------------------------
### ---------------------------------------------------------------------------------------------------------------------------
### ---------------------------------------------------------------------------------------------------------------------------

  java:
    container_name: java-microservice
    image: ms-google-image:latest
    environment:
      BEARER: $BEARER
    ports:
      - 5111:5111
    depends_on:
      - check-ksql-db-started
    networks:
      - elk
      
  check-ksql-db-started: 
    image: jwilder/dockerize:0.6.1
    depends_on:
      - ksqldb-server
    command: 'dockerize -wait=tcp://ksqldb-server:8088'
  
networks:
  elk:
    driver: bridge

volumes:
  elasticsearch:



